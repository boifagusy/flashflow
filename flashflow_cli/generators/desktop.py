"""
Desktop application generator for FlashFlow.
This module generates cross-platform desktop applications using Flet.
"""

import os
from pathlib import Path
from typing import Dict, Any
from .base import BaseGenerator


class DesktopGenerator(BaseGenerator):
    """Generator for desktop applications using Flet."""
    
    def __init__(self, project_path: str, project_name: str):
        """
        Initialize the desktop generator.
        
        Args:
            project_path: Path to the project directory
            project_name: Name of the project
        """
        super().__init__(project_path, project_name)
        self.desktop_path = Path(project_path) / "dist" / "desktop"
    
    def generate(self, ir: Dict[str, Any]) -> None:
        """
        Generate desktop application code from IR.
        
        Args:
            ir: Intermediate representation of the application
        """
        # Create directory structure
        self._create_directory_structure()
        
        # Generate main application file
        self._generate_main_app(ir)
        
        # Generate UI components
        self._generate_ui_components(ir)
        
        # Generate desktop configuration
        self._generate_desktop_config(ir)
        
        # Generate build scripts
        self._generate_build_scripts(ir)
    
    def _create_directory_structure(self) -> None:
        """Create the directory structure for the desktop application."""
        # Create main desktop directory
        self.desktop_path.mkdir(parents=True, exist_ok=True)
        
        # Create subdirectories
        subdirs = ["assets", "components", "pages", "utils"]
        for subdir in subdirs:
            (self.desktop_path / subdir).mkdir(exist_ok=True)
    
    def _generate_main_app(self, ir: Dict[str, Any]) -> None:
        """Generate the main application file."""
        main_content = self._get_main_app_template(ir)
        main_file = self.desktop_path / "main.py"
        
        with open(main_file, 'w') as f:
            f.write(main_content)
    
    def _generate_ui_components(self, ir: Dict[str, Any]) -> None:
        """Generate UI components based on the IR."""
        if 'ui' in ir:
            ui_config = ir['ui']
            # Generate components based on UI configuration
            # This would use the Flet UI abstractions
            pass
    
    def _generate_desktop_config(self, ir: Dict[str, Any]) -> None:
        """Generate desktop-specific configuration."""
        if 'desktop' in ir:
            desktop_config = ir['desktop']
            # Generate configuration files based on desktop settings
            # This would handle window, tray, and menu configurations
            pass
    
    def _generate_build_scripts(self, ir: Dict[str, Any]) -> None:
        """Generate build scripts for different platforms."""
        # Generate platform-specific build scripts
        build_script = self._get_build_script_template()
        build_file = self.desktop_path / "build_desktop.py"
        
        with open(build_file, 'w') as f:
            f.write(build_script)
    
    def _get_main_app_template(self, ir: Dict[str, Any]) -> str:
        """Get the template for the main application file."""
        app_name = ir.get('name', 'FlashFlow Desktop App')
        
        template = f'''"""
Main application file for {app_name}
Generated by FlashFlow Desktop Generator
"""

import flet as ft
from flet import Page, app

def main(page: Page):
    """
    Main application entry point.
    
    Args:
        page: The main application page
    """
    # Configure page
    page.title = "{app_name}"
    
    # Apply desktop configuration
    _configure_desktop_page(page)
    
    # Create main UI
    _create_main_ui(page)
    
    # Show the page
    page.update()

def _configure_desktop_page(page: Page):
    """Configure desktop-specific page settings."""
    # This would be configured based on the .flow file desktop settings
    page.window_width = 1200
    page.window_height = 800
    page.window_resizable = True

def _create_main_ui(page: Page):
    """Create the main user interface."""
    # This would be generated based on the UI components in the .flow file
    page.add(
        ft.Text("{app_name}", size=32, weight=ft.FontWeight.BOLD),
        ft.Text("Desktop application generated by FlashFlow", size=16),
    )

if __name__ == "__main__":
    app(target=main)
'''
        return template
    
    def _get_build_script_template(self) -> str:
        """Get the template for the build script."""
        template = '''"""
Build script for FlashFlow desktop applications.
"""

import os
import sys
import subprocess
from pathlib import Path

def build_desktop_app(platform: str = "all"):
    """
    Build the desktop application for the specified platform.
    
    Args:
        platform: Target platform (windows, macos, linux, or all)
    """
    print(f"Building desktop application for {platform}...")
    
    # This would use flet pack or similar to create the executable
    try:
        if platform == "windows":
            subprocess.run(["flet", "pack", "main.py", "--product-name", "FlashFlowApp"])
        elif platform == "macos":
            subprocess.run(["flet", "pack", "main.py", "--product-name", "FlashFlowApp"])
        elif platform == "linux":
            subprocess.run(["flet", "pack", "main.py", "--product-name", "FlashFlowApp"])
        else:
            # Build for all platforms
            subprocess.run(["flet", "pack", "main.py", "--product-name", "FlashFlowApp"])
        
        print("Build completed successfully!")
    except subprocess.CalledProcessError as e:
        print(f"Build failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) > 1:
        platform = sys.argv[1]
    else:
        platform = "all"
    
    build_desktop_app(platform)
'''
        return template